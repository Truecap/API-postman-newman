{
	"info": {
		"_postman_id": "9175a4d8-3a71-41a2-af69-4a04e65a1bfd",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13847985"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create Product - invalid body/negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name_for_negative_post}}\",\r\n    \"price\": {{price_for_watermelon}},\r\n    \"sku\": {{sku_for_watermelon}},\r\n    \"description\": \"{{description_for_watermelon}}\",\r\n    \"color\": \"{{invalid_field_color_for_negative_post}}\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"created product is orange\", () => {\r",
									"  const responseJson = pm.response.json();\r",
									"  pm.environment.set(\"id_for_created_product\", responseJson.id);\r",
									"  pm.expect(responseJson.name).to.eql(pm.environment.get(\"new_product_name\"));\r",
									"  pm.expect(responseJson.id).to.eql(pm.environment.get(\"id_for_created_product\"));\r",
									"  pm.expect(responseJson.price).to.eql(parseInt(pm.environment.get(\"price_for_orange\")));\r",
									"  pm.expect(responseJson.sku).to.eql(parseInt(pm.environment.get(\"sku_for_orange\")));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{new_product_name}}\",\r\n    \"price\": {{price_for_orange}},\r\n    \"sku\": {{sku_for_orange}},\r\n    \"description\": \"{{description_for_orange}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Created product matches: name, price, id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"new_product_name\", \"price_for_orange\", \"id_for_created_product\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products - Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const schema = {\r",
									"  \"properties\": {\r",
									"        \"id\" : {\"type\" : \"number\"},\r",
									"        \"name\" : {\"type\" : \"string\"},\r",
									"        \"price\" : {\"type\" : \"number\"},\r",
									"        \"sku\" : {\"type\" : \"number\"},\r",
									"        \"description\" : {\"type\" : \"string\"} \r",
									"    },\r",
									"    required: [\"id\",\"name\",\"price\",\"sku\",\"description\"]\r",
									"  };\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Found product matches: name, price, id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"new_product_name\", \"price_for_orange\", \"id_for_created_product\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page=4&pageSize=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "4"
								},
								{
									"key": "pageSize",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List products - Sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"List products sorting desc by id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(4);\r",
									"    pm.expect(jsonData[1].id).to.eql(3);\r",
									"    pm.expect(jsonData[2].id).to.eql(2);\r",
									"    pm.expect(jsonData[3].id).to.eql(1);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=DESC&sortKey=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "DESC"
								},
								{
									"key": "sortKey",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"finding product name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"new_product_name\"));  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{id_for_created_product}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID - invalid Id/negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{invalid_id_for_get}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{invalid_id_for_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON value check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"banana_to_orange\"));\r",
									"    pm.expect(jsonData.price).to.eql(parseInt(pm.environment.get(\"price_for_banana\")));\r",
									"    pm.expect(jsonData.description).to.eql(pm.environment.get(\"description_for_banana\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{id_for_created_product}},\r\n    \"name\": \"{{banana_to_orange}}\",\r\n    \"price\": {{price_for_banana}},\r\n    \"sku\": {{sku_for_banana}},\r\n    \"description\": \"{{description_for_banana}}\"\r\n    \r\n    \r\n\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product - invalid body requset/negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"responce body with invalid Id\", function () {\r",
									"    pm.response.to.have.body(\"Item not found with ID99\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{invalid_id_for_put_delete}},\r\n    \"name\": \"{{product_for_negative_put}}\",\r\n    \"price\": {{price_for_cucumber}},\r\n    \"sku\": {{sku_for_cucumber}},\r\n    \"description\": \"{{description_for_cucumber}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body({\r",
									"    \"name\": pm.environment.get(\"banana_to_orange\"),\r",
									"    \"price\": (parseInt(pm.environment.get(\"price_for_banana\"))),\r",
									"    \"sku\": (parseInt(pm.environment.get(\"sku_for_banana\"))),\r",
									"    \"description\": pm.environment.get(\"description_for_banana\"),\r",
									"    \"id\": (parseInt(pm.environment.get(\"id_for_created_product\")))\r",
									"});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{id_for_created_product}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{id_for_created_product}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID - invalid ID/negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"4"
							],
							"query": [
								{
									"key": "id",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "firstName",
									"value": "Bob",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/9",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Test\",\r\n    \"lastName\": \"Test2\",\r\n    \"email\": \"test.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-13\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2022-08-25\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n       \"firstName\": \"Test13\",\r\n        \"lastName\": \"Test2\",\r\n        \"email\": \"test.real@gmail.com\",\r\n        \"dateOfBirth\": \"2001-10-13\",\r\n        \"emailVerified\": true,\r\n        \"signUpDate\": \"2022-08-25\",\r\n        \"status\": \"active\",\r\n        \"level\": \"da\",\r\n        \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "correct_id",
			"value": ":id"
		}
	]
}